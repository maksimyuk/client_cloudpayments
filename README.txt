Задание:
  Необходимо реализовать клиент на Python к Cloudpayments API. В рамках задачи необходимо реализовать оплату по криптограмме (метод charge).
  Предполагается, что платежи будут проходить только по токену Yandex Pay.

Требования:

    API клиента должно быть удобным для вызова из Python-кода.
    Реализовать аутентификацию запросов.
    Архитектура должна позволять добавлять остальные методы API.
    Рекомендуется использовать python >3.10, marshmallow, marshmallow_dataclass, aiohttp >3.8.
    Реализация должна наследовать абстрактный класс AbstractInteractionClient.


Реализация:
  * Абстрактный класс AbstractInteractionClient переопределяется конкретным классом cloudpayments.interaction.client.CloudPaymentInteractionClient.
    В нем указываются атрибуты адрес API, а также переопределен метод _get_session_kwargs для добавления авторизации и идемпотентности.
    Этот метод сделан в абстрактном классе приватным, но я посчитал, что это удобное место, в котором можно задать необходимые параметры запроса
    для всех пользователей данного клиента и предложил бы его сделать публичным. Или же бы предложил реализовать Отдельный класс фабрики сессии и использовать композицию.

  * Сама логика обработки методов находится в файле processor.py. Предполагается, что для каждого метода API, нужно реализовать свой класс, реализующий обработку метода.
    Обработчики методов в себе содержат конкретный клиент (наследованный от AbstractInteractionClient). Так сделано потому, что
    я посчитал, что у класса AbstractInteractionClient уже много обязанностей (формирование сессии, отправка запроса, принятие запроса). Поэтому логику обработки каждого из API предлагаю вынести в отдельный класс,
    а для взаимодействия с API использовать композицию клиента CloudPaymentInteractionClient.

  * Предполагается, что пользователь будет обращаться к client_payments.client.CloudPayment и к необходимому методу, передавая параметры в виде словаря.

  * Для описания зависимостей проекта используется poetry.

Проверка работы:
  * Для тестирования работы данного клиента используется pytest;

  * Т.к. для тестирования нужны тестовые данные криптограммы и яндекс токена, приходящие с фронта, то используются замоканные данные с тестовых примеров документации;


Возникшие вопросы и уточнения:
  * В формулировке задачи сказано, что оплата должна проходить по криптограмме (методы https://api.cloudpayments.ru/payments/cards/charge — для одностадийного платежа или https://api.cloudpayments.ru/payments/cards/auth — для двухстадийного).
    Также сказано, что оплата должна проходить только по токену ЯндексPay, но судя по документации (https://developers.cloudpayments.ru/#oplata-po-tokenu-rekarring), это разные методы.
    Сделана оплата по https://api.cloudpayments.ru/payments/charge согласно примеру https://developers.cloudpayments.ru/#platezhi-cherez-api-cloudpayments
  * При реализации частично используется marshmallow для сериализации и десериализации для базовых проверок. Местами желательно исправить передачу словаря параметров на использование датакласса